<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- ==========================================================  -->
<!-- Configuration for MyBatis sqlmap mapping.                    -->
<!-- ==========================================================  -->

<!-- ============================================================================= -->
<!-- This file is generated by <tt>iwallet-dalgen</tt>, a DAL (Data Access Layer)  -->
<!-- code generation utility specially developed for <tt>iwallet</tt> project.     -->
<!--                                                                               -->
<!-- PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be     -->
<!-- OVERWRITTEN by someone else. To modify the file, you should go to directory   -->
<!-- <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding   -->
<!-- configuration files. Modify those files according to your needs, then run     -->
<!-- <tt>iwallet-dalgen</tt> to generate this file.                                -->
<!--                                                                               -->
<!-- @author zhyang                                                                -->
<!-- ============================================================================= -->

<!-- ==========================================================  -->
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的 -->
<!-- 例如namespace="com.jvv.dal.mapper.TbRepositoryMapper"就是com.jvv.dal.mapper(包名)+ TbRepositoryMapper( TbRepositoryMapperMapper.xml文件去除-mapping.xml) -->
<!-- ==========================================================  -->
<mapper namespace="com.heitian.ssm.dao.TbRepositoryMapper">
    <!-- ============================================= -->
    <!-- RESULT MAPS                                   -->
    <!-- ============================================= -->
    <!-- result maps for database table tb_repository -->
    <resultMap id="tbRepositoryDO" type="com.heitian.ssm.model.TbRepositoryDO">
        <id  property="id" column="id" javaType="java.lang.Long" jdbcType="INTEGER"/>
        <result  property="name" column="name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result  property="url" column="url" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result  property="lookNumber" column="look_number" javaType="java.lang.Long" jdbcType="INTEGER"/>
        <result  property="remark" column="remark" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result  property="creator" column="creator" javaType="java.lang.Long" jdbcType="INTEGER"/>
        <result  property="updater" column="updater" javaType="java.lang.Long" jdbcType="INTEGER"/>
        <result  property="createTime" column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
        <result  property="updateTime" column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="tbRepositoryDO_Columns">
        tbRepository.id,
        tbRepository.name,
        tbRepository.url,
        tbRepository.look_number,
        tbRepository.remark,
        tbRepository.creator,
        tbRepository.updater,
        tbRepository.create_time,
        tbRepository.update_time
    </sql>
    <!-- ============================================= -->
    <!-- mapped statements for TbRepositoryMapper -->
    <!-- ============================================= -->

    <!-- mapped statement for TbRepositoryMapper.insert -->
    <insert id="insert">
        <selectKey order="AFTER" resultType="java.lang.Long" keyProperty="tbRepository.id">
            SELECT LAST_INSERT_ID() 
        </selectKey>
        INSERT INTO tb_repository
        (
            name,
            url,
            look_number,
            remark,
            creator,
            updater,
            create_time,
            update_time
        )VALUES(
            #{tbRepository.name,jdbcType=VARCHAR},
            #{tbRepository.url,jdbcType=VARCHAR},
            #{tbRepository.lookNumber,jdbcType=INTEGER,javaType=java.lang.Long},
            #{tbRepository.remark,jdbcType=VARCHAR},
            #{tbRepository.creator,jdbcType=INTEGER,javaType=java.lang.Long},
            #{tbRepository.updater,jdbcType=INTEGER,javaType=java.lang.Long},
            #{tbRepository.createTime,jdbcType=TIMESTAMP,javaType=java.util.Date},
            #{tbRepository.updateTime,jdbcType=TIMESTAMP,javaType=java.util.Date}
        )
    </insert>


    <!-- mapped statement for TbRepositoryMapper.query -->
    <select id="query" resultMap="tbRepositoryDO">
                        SELECT 
                    <include refid="tbRepositoryDO_Columns"/>
                FROM tb_repository tbRepository
                <where>
                    <if test="tbRepository.id!=null " >
                        AND id = #{tbRepository.id,jdbcType=INTEGER,javaType=java.lang.Long} 
                    </if>
                    <if test="tbRepository.name!=null  and tbRepository.name!='' " >
                        AND name = #{tbRepository.name,jdbcType=VARCHAR} 
                    </if>
                    <if test="tbRepository.url!=null  and tbRepository.url!='' " >
                        AND url = #{tbRepository.url,jdbcType=VARCHAR} 
                    </if>
                    <if test="tbRepository.lookNumber!=null " >
                        AND look_number = #{tbRepository.lookNumber,jdbcType=INTEGER,javaType=java.lang.Long} 
                    </if>
                    <if test="tbRepository.remark!=null  and tbRepository.remark!='' " >
                        AND remark = #{tbRepository.remark,jdbcType=VARCHAR} 
                    </if>
                    <if test="tbRepository.creator!=null " >
                        AND creator = #{tbRepository.creator,jdbcType=INTEGER,javaType=java.lang.Long} 
                    </if>
                    <if test="tbRepository.updater!=null " >
                        AND updater = #{tbRepository.updater,jdbcType=INTEGER,javaType=java.lang.Long} 
                    </if>
                    <if test="tbRepository.createTime!=null " >
                        AND create_time = #{tbRepository.createTime,jdbcType=TIMESTAMP,javaType=java.util.Date} 
                    </if>
                    <if test="tbRepository.updateTime!=null " >
                        AND update_time = #{tbRepository.updateTime,jdbcType=TIMESTAMP,javaType=java.util.Date} 
                    </if>
                </where>
                ORDER BY create_time DESC
        LIMIT #{start},#{pageSize}
    </select>
            
    <!-- mapped statement for TbRepositoryMapper.queryCount -->
    <select id="queryCount" resultType="long">
        SELECT COUNT(id) 
        FROM tb_repository tbRepository
        <where>
            <if test="tbRepository.id!=null " >
                AND id = #{tbRepository.id,jdbcType=INTEGER,javaType=java.lang.Long} 
            </if>
            <if test="tbRepository.name!=null  and tbRepository.name!='' " >
                AND name = #{tbRepository.name,jdbcType=VARCHAR} 
            </if>
            <if test="tbRepository.url!=null  and tbRepository.url!='' " >
                AND url = #{tbRepository.url,jdbcType=VARCHAR} 
            </if>
            <if test="tbRepository.lookNumber!=null " >
                AND look_number = #{tbRepository.lookNumber,jdbcType=INTEGER,javaType=java.lang.Long} 
            </if>
            <if test="tbRepository.remark!=null  and tbRepository.remark!='' " >
                AND remark = #{tbRepository.remark,jdbcType=VARCHAR} 
            </if>
            <if test="tbRepository.creator!=null " >
                AND creator = #{tbRepository.creator,jdbcType=INTEGER,javaType=java.lang.Long} 
            </if>
            <if test="tbRepository.updater!=null " >
                AND updater = #{tbRepository.updater,jdbcType=INTEGER,javaType=java.lang.Long} 
            </if>
            <if test="tbRepository.createTime!=null " >
                AND create_time = #{tbRepository.createTime,jdbcType=TIMESTAMP,javaType=java.util.Date} 
            </if>
            <if test="tbRepository.updateTime!=null " >
                AND update_time = #{tbRepository.updateTime,jdbcType=TIMESTAMP,javaType=java.util.Date} 
            </if>
        </where>

    </select>
            
    <!-- mapped statement for TbRepositoryMapper.update -->
    <update id="update">
        UPDATE tb_repository
        <set>
            <if test="tbRepository.name!=null  and tbRepository.name!='' " >
                name = #{tbRepository.name,jdbcType=VARCHAR} ,
            </if>
            <if test="tbRepository.url!=null  and tbRepository.url!='' " >
                url = #{tbRepository.url,jdbcType=VARCHAR} ,
            </if>
            <if test="tbRepository.lookNumber!=null " >
                look_number = #{tbRepository.lookNumber,jdbcType=INTEGER,javaType=java.lang.Long} ,
            </if>
            <if test="tbRepository.remark!=null  and tbRepository.remark!='' " >
                remark = #{tbRepository.remark,jdbcType=VARCHAR} ,
            </if>
            <if test="tbRepository.creator!=null " >
                creator = #{tbRepository.creator,jdbcType=INTEGER,javaType=java.lang.Long} ,
            </if>
            <if test="tbRepository.updater!=null " >
                updater = #{tbRepository.updater,jdbcType=INTEGER,javaType=java.lang.Long} ,
            </if>
            <if test="tbRepository.createTime!=null " >
                create_time = #{tbRepository.createTime,jdbcType=TIMESTAMP,javaType=java.util.Date} ,
            </if>
            <if test="tbRepository.updateTime!=null " >
                update_time = #{tbRepository.updateTime,jdbcType=TIMESTAMP,javaType=java.util.Date} ,
            </if>
        </set>
        WHERE 
            id = #{tbRepository.id,jdbcType=INTEGER,javaType=java.lang.Long}

    </update>

    <!-- mapped statement for TbRepositoryMapper.delete -->
    <delete id="delete">
        <![CDATA[
        delete from tb_repository where (id = #{id, jdbcType=INTEGER})
        ]]>
    </delete>

    <!-- mapped statement for TbRepositoryMapper.findById -->
    <select id="findById" resultMap="tbRepositoryDO">
        SELECT 
        <include refid="tbRepositoryDO_Columns"/>
        FROM tb_repository tbRepository
        WHERE 
            id = #{id,jdbcType=INTEGER,javaType=java.lang.Long}

    </select>
            
    <!-- mapped statement for TbRepositoryMapper.findByIdIn -->
    <select id="findByIdIn" resultMap="tbRepositoryDO">
        SELECT 
        <include refid="tbRepositoryDO_Columns"/>
        FROM tb_repository tbRepository
        WHERE 
            id IN 
             <foreach collection="idList" item="item"  open="(" separator="," close=")"> 
                 #{item} 
             </foreach> 

    </select>
            
</mapper>
