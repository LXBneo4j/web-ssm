/*
 *
 * www.jinvovo.com Inc
 * Copyright (c) 2017 All Rights Reserved.
 *
 */
package com.heitian.ssm.dao;

//import org.springframework.stereotype.Repository;
//import org.springframework.transaction.annotation.Transactional;

import com.heitian.ssm.model.TbNoticeDO;
import org.apache.ibatis.annotations.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>tb_notice</tt>.
 *
 * This file is generated by <tt>iwallet-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>iwallet</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/tb_notice.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>iwallet-dalgen</tt> 
 * to generate this file.
 *
 * @author Cheng Li
 * @author Turalyon
 */
 @SuppressWarnings("rawtypes")
 @Repository
public interface TbNoticeMapper {
	/**
	 *  Insert one <tt>TbNoticeDO</tt> object to DB table <tt>tb_notice</tt>, return primary key
	 *
	 * 插入数据
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into tb_notice(id,name,content,look_number,remark,creator,updater,create_time,update_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param tbNotice
	 *	@return int
	 */	 

    public int insert(@Param("tbNotice") TbNoticeDO tbNotice);

	/**
	 *  Query DB table <tt>tb_notice</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from tb_notice</tt>
	 *
	 *	@param tbNotice
	 *	@param start
	 *	@param pageSize
	 *	@return List<TbNoticeDO>
	 */	 

    public List<TbNoticeDO> query(@Param("tbNotice") TbNoticeDO tbNotice, @Param("start") long start,
                                  @Param("pageSize") int pageSize);

	/**
	 *  Query DB table <tt>tb_notice</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from tb_notice</tt>
	 *
	 *	@param tbNotice
	 *	@return long
	 */	 

    public long queryCount(@Param("tbNotice") TbNoticeDO tbNotice);

	/**
	 *  Update DB table <tt>tb_notice</tt>.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update tb_notice set name=? where (id = ?)</tt>
	 *
	 *	@param tbNotice
	 *	@return int
	 */	 

    public int update(@Param("tbNotice") TbNoticeDO tbNotice);

	/**
	 *  Delete records from DB table <tt>tb_notice</tt>.
	 *
	 * 根据主键删除数据
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from tb_notice where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 */	 

    public int delete(@Param("id") Long id);

	/**
	 *  Query DB table <tt>tb_notice</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from tb_notice tbNotice where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return TbNoticeDO
	 */	 

    public TbNoticeDO findById(@Param("id") Long id);

	/**
	 *  Query DB table <tt>tb_notice</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from tb_notice</tt>
	 *
	 *	@param idList
	 *	@return List<TbNoticeDO>
	 */	 

    public List<TbNoticeDO> findByIdIn(@Param("idList") List idList);

}
